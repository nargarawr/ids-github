source('~/.active-rstudio-document')
plotit(BESTFIS)
source('C:/Users/Cxk/Dropbox/Private/University/Third Year/FUZ/coursework/testFramework.r')
plotit(BESTFIS)
source('C:/Users/Cxk/Dropbox/Private/University/Third Year/FUZ/coursework/testFramework.r')
source('C:/Users/Cxk/Dropbox/Private/University/Third Year/FUZ/coursework/testFramework.r')
plotit(BESTFIS)
source('C:/Users/Cxk/Dropbox/Private/University/Third Year/FUZ/coursework/testFramework.r')
plotit(BESTFIS)
persp3d(x, y, m, theta=50, phi=25, expand=0.75, col="lightblue",
ticktype="detailed", xlab="", ylab="time", zlab="",axes=TRUE)
wireframe(m~x+y,x_data)
wireframe(m~x+y,x_data)
library(lattic)
library(lattice)
wireframe(m~x+y,x_data)
plot3d(x_data, type='wire')
plot3d(x_data)
plot3d(c(x,y,m), type='wire')
plot3d(x,y,m, type='wire')
plot3d(x,y,m)
wireframe(m ~ x * y, data=x_data)
im <- with(x_data, interp(x,y,m))
im
m
im <- with(x_data, interp(x,y,z))
x
x<-x_data[1]
y<-x_data[2]
im <- with(x_data, interp(x,y,z))
x<-unlist(x)
y<-unlist(y)
z2<-unlist(z2)
x
y
z
z2
z2<-unlist(z2, true)
z2<-unlist(z2, recursive=FALSE)
z2
z2<-unlist(z2)
x_data[1]
y_data <- x_data
y_data
y_data <- cbind(z2)
y_data
z2 <- unlist(y_data)
z2
im2 <- with(x_data, interp(x,y,z2))
im2
with(im2, image(x,y,z2))
with(im2, image(x,y,z2))
im2 <- with(x_data, interp(x,y,z2))
z2
x
y
z
z
z2
z2<-unlist(z2)
z2
x_data
x_data[1]
y_data <-x_data
y_data <- cbind(y_data, z2)
y_data
z2 <- unlist(y_data[4])
z2
library(akima)
im <- with(x_data,interp(x,y,z2))
with(im,image(x,y,z2))
z
z2
zlibrary(akima)
im <- with(x_data,interp(x,y,z))
with(im,image(x,y,z))
zlibrary(akima)
im <- with(x_data,interp(x,y,z))
with(im,image(x,y,z))
zlibrary(akima)
im <- with(x_data,interp(x,y,z))
with(im,image(x,y,z2))
zlibrary(akima)
im <- with(x_data,interp(x,y,z2))
with(im,image(x,y,z2))
m
m2
zlibrary(akima)
im <- with(x_data,interp(x,y,z2))
with(im,image(x,y,m2))
zlibrary(akima)
im <- with(x_data,interp(x,y,z2))
with(im,image(x,y,m))
zlibrary(akima)
im <- with(x_data,interp(x,y,z2))
with(im,image(x,y,z2))
zlibrary(akima)
im <- with(x_data,interp(x,y,m2))
with(im,image(x,y,z2))
zlibrary(akima)
im <- with(x_data,interp(x,y,m2))
with(im,image(x,y,m2))
length(x)
length(y)-1
length(m2)
length(z)
z2<-z
im <- with(x_data,interp(x,y,z2))
with(im,image(x,y,z2))
im <- with(x_data,interp(x,y,z))
with(im,image(x,y,z))
z2 <- z
z
z2
m2
z2
surf(BESTFIS)
z2
source('C:/Users/Cxk/Dropbox/Private/University/Third Year/FUZ/coursework/AMAZINGFIS.r')
evalFIS(matrix(c(0,45),1,2))
evalFIS(matrix(c(0,45),1,2), BESTFIS)
evalFIS(matrix(c(20,45),1,2), BESTFIS)
evalFIS(matrix(c(40,45),1,2), BESTFIS)
evalFIS(matrix(c(60,45),1,2), BESTFIS)
evalFIS(matrix(c(80,45),1,2), BESTFIS)
evalFIS(matrix(c(160,25),1,2), BESTFIS)
# Ten attempts, gaussian outputs
# GAUSS OUT
require("FuzzyToolkitUoN")
#rm(list=ls(all=TRUE))
#source("/home/cxk/Dropbox/Private/University/Third\ Year/FUZ/coursework/testFramework.r")
#x_data <- read.csv("/home/cxk/Dropbox/Private/University/Third\ Year/FUZ/coursework/dataset.csv")
# Create the BESTFIS object
BESTFIS <- newFIS("Urgency Calculator v10")
# Add the three variables, 2 inputs and 1 output
BESTFIS <- addVar(BESTFIS, "input",  "Heart Rate",  c(0:160))
BESTFIS <- addVar(BESTFIS, "input",  "Temperature", c(25:45))
BESTFIS <- addVar(BESTFIS, "output", "Urgency",     c(0:100))
mf1 <- gaussMF("D Low", 0:160, c(10.2,-15,1))
mf2 <- gaussMF("V Low", 0:160, c(5.2,40,1))
mf3 <- gaussMF("Low", 0:160, c(7.3,50,1))
mf4 <- gaussMF("Average", 0:160, c(14.8,80,1))
mf5 <- gaussMF("High", 0:160, c(10.2,108,1))
mf6 <- gaussMF("V High", 0:160, c(7.8,122,1))
mf7 <- gaussMF("D High", 0:160, c(20,177,1))
# Add membership functions to the "Heart Rate" variable
BESTFIS <- addMF(BESTFIS, "input", 1, mf1)
BESTFIS <- addMF(BESTFIS, "input", 1, mf2)
BESTFIS <- addMF(BESTFIS, "input", 1, mf3)
BESTFIS <- addMF(BESTFIS, "input", 1, mf4)
BESTFIS <- addMF(BESTFIS, "input", 1, mf5)
BESTFIS <- addMF(BESTFIS, "input", 1, mf6)
BESTFIS <- addMF(BESTFIS, "input", 1, mf7)
plotMF(BESTFIS, "input", 1)
# 5.488184
mf8 <- trapMF("D Low", 25:45, c(25,25,27,29,1))
mf9 <- trapMF("V Low", 25:45, c(27,32,33,35,1))
mf10 <- trapMF("Low", 25:45, c(34,35,36,37,1))
mf11 <- triMF("Average", 25:45, c(36.5,37,37.5,1))
mf12 <- trapMF("High", 25:45, c(37,39,40,41,1))
mf13 <- trapMF("V High", 25:45, c(38,41,42,44,1))
mf14 <- trapMF("D High", 25:45, c(41,45,45,45,1))
BESTFIS <- addMF(BESTFIS, "input", 2, mf8)
BESTFIS <- addMF(BESTFIS, "input", 2, mf9)
BESTFIS <- addMF(BESTFIS, "input", 2, mf10)
BESTFIS <- addMF(BESTFIS, "input", 2, mf11)
BESTFIS <- addMF(BESTFIS, "input", 2, mf12)
BESTFIS <- addMF(BESTFIS, "input", 2, mf13)
BESTFIS <- addMF(BESTFIS, "input", 2, mf14)
plotMF(BESTFIS, "input", 2)
# Create membership functions for "Urgency"
mf11 <- gaussMF("Noncritical", c(0:100), c(5.8,4,1))
mf12 <- gaussMF("Low",         c(0:100), c(4.125,33,1))
mf13 <- gaussMF("Rising",      c(0:100), c(3.675,31,1))
mf14 <- gaussMF("High",        c(0:100), c(4.1,79,1))
mf15 <- gaussMF("Critical",    c(0:100), c(3.9,102,1))
BESTFIS <- addMF(BESTFIS, "output", 1, mf11)
BESTFIS <- addMF(BESTFIS, "output", 1, mf12)
BESTFIS <- addMF(BESTFIS, "output", 1, mf13)
BESTFIS <- addMF(BESTFIS, "output", 1, mf14)
BESTFIS <- addMF(BESTFIS, "output", 1, mf15)
plotMF(BESTFIS, "output", 1)
# Create the rules of the system
# HR is D Low
BESTFIS <- addRule(BESTFIS, c(1, 1, 5, 1, 1))
BESTFIS <- addRule(BESTFIS, c(1, 2, 5, 1, 1))
BESTFIS <- addRule(BESTFIS, c(1, 3, 5, 1, 1))
BESTFIS <- addRule(BESTFIS, c(1, 4, 5, 1, 1))
BESTFIS <- addRule(BESTFIS, c(1, 5, 5, 1, 1))
BESTFIS <- addRule(BESTFIS, c(1, 6, 5, 1, 1))
BESTFIS <- addRule(BESTFIS, c(1, 7, 5, 1, 1))
# HR is V Low
BESTFIS <- addRule(BESTFIS, c(2, 1, 5, 1, 1))
BESTFIS <- addRule(BESTFIS, c(2, 2, 4, 1, 1))
BESTFIS <- addRule(BESTFIS, c(2, 3, 4, 1, 1))
BESTFIS <- addRule(BESTFIS, c(2, 4, 3, 1, 1))
BESTFIS <- addRule(BESTFIS, c(2, 5, 4, 1, 1))
BESTFIS <- addRule(BESTFIS, c(2, 6, 4, 1, 1))
BESTFIS <- addRule(BESTFIS, c(2, 7, 5, 1, 1))
# HR is Low
BESTFIS <- addRule(BESTFIS, c(3, 1, 5, 1, 1))
BESTFIS <- addRule(BESTFIS, c(3, 2, 4, 1, 1))
BESTFIS <- addRule(BESTFIS, c(3, 3, 3, 1, 1))
BESTFIS <- addRule(BESTFIS, c(3, 4, 2, 1, 1))
BESTFIS <- addRule(BESTFIS, c(3, 5, 3, 1, 1))
BESTFIS <- addRule(BESTFIS, c(3, 6, 4, 1, 1))
BESTFIS <- addRule(BESTFIS, c(3, 7, 5, 1, 1))
# HR is Average
BESTFIS <- addRule(BESTFIS, c(4, 1, 5, 1, 1))
BESTFIS <- addRule(BESTFIS, c(4, 2, 4, 1, 1))
BESTFIS <- addRule(BESTFIS, c(4, 3, 3, 1, 1))
BESTFIS <- addRule(BESTFIS, c(4, 4, 1, 1, 1))
BESTFIS <- addRule(BESTFIS, c(4, 5, 3, 1, 1))
BESTFIS <- addRule(BESTFIS, c(4, 6, 4, 1, 1))
BESTFIS <- addRule(BESTFIS, c(4, 7, 5, 1, 1))
# HR is High
BESTFIS <- addRule(BESTFIS, c(5, 1, 5, 1, 1))
BESTFIS <- addRule(BESTFIS, c(5, 2, 4, 1, 1))
BESTFIS <- addRule(BESTFIS, c(5, 3, 3, 1, 1))
BESTFIS <- addRule(BESTFIS, c(5, 4, 2, 1, 1))
BESTFIS <- addRule(BESTFIS, c(5, 5, 3, 1, 1))
BESTFIS <- addRule(BESTFIS, c(5, 6, 4, 1, 1))
BESTFIS <- addRule(BESTFIS, c(5, 7, 5, 1, 1))
# HR is V High
BESTFIS <- addRule(BESTFIS, c(6, 1, 5, 1, 1))
BESTFIS <- addRule(BESTFIS, c(6, 2, 4, 1, 1))
BESTFIS <- addRule(BESTFIS, c(6, 3, 4, 1, 1))
BESTFIS <- addRule(BESTFIS, c(6, 4, 3, 1, 1))
BESTFIS <- addRule(BESTFIS, c(6, 5, 4, 1, 1))
BESTFIS <- addRule(BESTFIS, c(6, 6, 4, 1, 1))
BESTFIS <- addRule(BESTFIS, c(6, 7, 5, 1, 1))
# HR is D High
BESTFIS <- addRule(BESTFIS, c(7, 7, 5, 1, 1))
BESTFIS <- addRule(BESTFIS, c(7, 1, 5, 1, 1))
BESTFIS <- addRule(BESTFIS, c(7, 2, 5, 1, 1))
BESTFIS <- addRule(BESTFIS, c(7, 3, 5, 1, 1))
BESTFIS <- addRule(BESTFIS, c(7, 4, 5, 1, 1))
BESTFIS <- addRule(BESTFIS, c(7, 5, 5, 1, 1))
BESTFIS <- addRule(BESTFIS, c(7, 6, 5, 1, 1))
BESTFIS <- addRule(BESTFIS, c(7, 7, 5, 1, 1))
#evalBESTFIS(matrix(c(hrate, temp),1,2), BESTFIS)
gensurf(BESTFIS)
calcRMSE(x_data,BESTFIS)
writeFIS("~/FUZ-FIS-4159378.fis")
writeFIS(BESTFIS, "~/FUZ-FIS-4159378.fis")
test <- readFIS("~/FUZ-FIS-4159378.fis")
gensurf(test)
calcRMSE(test)
calcRMSE(x-data,test)
calcRMSE(x_data,test)
calcRMSEDefz(x_data, test)
test$defuzzMethod <- "Bisector"
gensurf(test)
test$defuzzMethod <- "bisector"
gensurf(test)
test$defuzzMethod <- "mom"
gensurf(test)
test$defuzzMethod <- "lom"
gensurf(test)
test$defuzzMethod <- "som"
gensurf(test)
setwd("C:\\Users\\cxk\\Dropbox\\Private\\Dissertation\\ids-github\\src")
library("shiny")
runApp(".")
inputVals
sink()
inputVals
outputVals
sink()
outputVals
inputVals
Q
setwd("C:\\Users\\cxk\\Dropbox\\Private\\Dissertation\\ids-github\\src")
library("shiny")
runApp(".")
weight
sink()
weight
weight
Q
tippertest()
setwd("C:\\Users\\cxk\\Dropbox\\Private\\Dissertation\\ids-github\\src")
library("shiny")
runApp(".")
connective
sink()
connective
ruleList
sink()
ruleList
Q
Q
setwd("C:\\Users\\cxk\\Dropbox\\Private\\Dissertation\\ids-github\\src")
library("shiny")
runApp(".")
tippertest()
setwd("C:\\Users\\cxk\\Dropbox\\Private\\Dissertation\\ids-github\\src")
library("shiny")
runApp(".")
setwd("C:\\Users\\cxk\\Dropbox\\Private\\Dissertation\\ids-github\\src")
library("shiny")
runApp(".")
tippertest()
tippertest()$inputList
length(tippertest()$inputList)
length(tippertest()$outputList)
setwd("C:\\Users\\cxk\\Dropbox\\Private\\Dissertation\\ids-github\\src")
library("shiny")
runApp(".")
setwd("C:\\Users\\cxk\\Dropbox\\Private\\Dissertation\\ids-github\\src")
library("shiny")
runApp(".")
gensurf(fis)
fis
tippertest()
plotMF(fis, "input", 1)
x <<- fis
x
plotMF(x, "input", 1)
plotMF(x, "input", 2)
plotMF(x, "output", 2)
plotMF(x, "output", 1)
plotMF(x, "output", 2)
plotMF(x, "input", 2)
setwd("C:\\Users\\cxk\\Dropbox\\Private\\Dissertation\\ids-github\\src")
library("shiny")
runApp(".")
inputLines
txtc = inputLines[[i]]
mfCount = eval(parse(text=txt[[1]][txtc+3]))
txtc= txtc+1
txtc
txtc = inputLines[[2]]
mfCount = eval(parse(text=txt[[1]][txtc+3]))
txtc= txtc+1
inputLines
txtc = inputLines[[1]]
txtc
txt[[1]][14]
txt[[1]][14]
txtc
txt
length(inputLines)
i
i
i
i
i
mfCount
mfCount
mfCount
mfCount
gsub("MF\\d+='|':'[A-Za-z]+',\\[((-)?\\d+(\\.)?\\d*(\\s)?)+\\]","",txt[[1]][txtc])
gsub("MF\\d+='|':'[A-Za-z]+',\\[((-)?\\d+\\.?\\d*(\\s)*)*\\]","",txt[[1]][txtc])
gsub("MF\\d+='[a-zA-Z]+':'|',\\[((-)?\\d+\\.?\\d*(\\s)*)*\\]","",txt[[1]][txtc])
strsplit(gsub("MF\\d+='[a-zA-Z]+':'[a-zA-Z]+|',\\[|\\]","",txt[[1]][txtc]), " ")
gsub("MF\\d+='[a-zA-Z]+':'[a-zA-Z]+|',\\[|\\]","",txt[[1]][txtc]), " "
gsub("MF\\d+='[a-zA-Z]+':'[a-zA-Z]+|',\\[|\\]","",txt[[1]][txtc])
gsub("MF\\d+='[a-zA-Z]+':'[a-zA-Z]+|',\\[|\\]|\\s","",txt[[1]][txtc])
gsub("MF\\d+='[a-zA-Z]+':'[a-zA-Z]+|',\\[|\\]|(\\s\\s)","",txt[[1]][txtc])
gsub("MF\\d+='[a-zA-Z]+':'[a-zA-Z]+|',\\[|\\]|","",txt[[1]][txtc])
gsub("  ", "", gsub("MF\\d+='[a-zA-Z]+':'[a-zA-Z]+|',\\[|\\]|","",txt[[1]][txtc]))
gsub("  ", " ", gsub("MF\\d+='[a-zA-Z]+':'[a-zA-Z]+|',\\[|\\]|","",txt[[1]][txtc]))
strsplit(gsub("  ", " ", gsub("MF\\d+='[a-zA-Z]+':'[a-zA-Z]+|',\\[|\\]|","",txt[[1]][txtc])), " ")
strsplit(gsub("  ", " ", gsub("MF\\d+='[a-zA-Z]+':'[a-zA-Z]+|',\\[|\\]|","",txt[[1]][txtc])), " ")
vals
sink()
vals
vals
input$passBackEval
sink()
input$passBackEval
input$passBackEval
input$passBackEval
input$passBackEval
sink()
input$passBackEval
Q
setwd("C:\\Users\\cxk\\Dropbox\\Private\\Dissertation\\ids-github\\src")
library("shiny")
runApp(".")
setwd("C:\\Users\\cxk\\Dropbox\\Private\\Dissertation\\ids-github\\src")
library("shiny")
runApp(".")
x <- "1 1 "
length(strsplit(x, " ")
length(strsplit(x, " ")
)
length(strsplit(x, " "))
length(strsplit(x[[1]], " "))
length(strsplit(x[[1]], " "))
x
strsplit(x, " ")
length(strsplit(x, " "))[[1]]
length(strsplit(x, " "))[[1]][1]
length(strsplit(x, " "))[[1]]
length(strsplit(x, " "))[1]
length(strsplit(x, " "))
length(strsplit(x, " "))[[1]][1]
f <- length(strsplit(x, " "))[[1]][1]
f
f <- length(strsplit(x, " "))
f
f <- (strsplit(x, " "))
f
f[[1]]
length(f[[1]])
length(strsplit(x," ")[[1]])
setwd("C:\\Users\\cxk\\Dropbox\\Private\\Dissertation\\ids-github\\src")
library("shiny")
runApp(".")
tippertest()
tippertest()$outputList
tippertest()$outputList[[1]]
tippertest()$outputList[[1]]$varName
tippertest()$outputList[[1]]$name
tippertest()$outputList[[1]]$outputName
setwd("C:\\Users\\cxk\\Dropbox\\Private\\Dissertation\\ids-github\\src")
library("shiny")
runApp(".")
setwd("C:\\Users\\cxk\\Dropbox\\Private\\Dissertation\\ids-github\\src")
library("shiny")
runApp(".")
setwd("C:\\Users\\cxk\\Dropbox\\Private\\Dissertation\\ids-github\\src")
library("shiny")
runApp(".")
setwd("C:\\Users\\cxk\\Dropbox\\Private\\Dissertation\\ids-github\\src")
library("shiny")
runApp(".")
capture.output
capture.output()
capture.output("test")
capture.output()
setwd("C:\\Users\\cxk\\Dropbox\\Private\\Dissertation\\ids-github\\src")
library("shiny")
runApp(".")
setwd("C:\\Users\\cxk\\Dropbox\\Private\\Dissertation\\ids-github\\src")
library("shiny")
runApp(".")
ruleList
txtc
txt
inputVals = strsplit(gsub(",.*$", "", txt[[1]][txtc]), " ")
outputVals = strsplit(gsub(".$","",gsub("\\(.*$","",gsub("^.*,.","",txt[[1]][txtc]))), " ")
weight = as.numeric(gsub(" ","",gsub(".*\\(", "", gsub("\\).*$","", txt[[1]][txtc]))))
connective = as.numeric(gsub(" ","", gsub("^.*:", "", txt[[1]][txtc])))
inputVals
ruleList = c()
for ( fg in 1:length(inputVals[[1]])){
ruleList = c(ruleList, as.numeric(inputVals[[1]][fg]))
}
ruleList
for ( fg in 1:length(outputVals[[1]])){
ruleList = c(ruleList, as.numeric(outputVals[[1]][fg]))
}
ruleList = c (ruleList, weight)
ruleList = c (ruleList, connective)
FIS = addRule(FIS, ruleList)
ruleList
txt
sink()
txt
inputVals = strsplit(gsub(",.*$", "", txt[[1]][txtc]), " ")
outputVals = strsplit(gsub(".$","",gsub("\\(.*$","",gsub("^.*,.","",txt[[1]][txtc]))), " ")
weight = as.numeric(gsub(" ","",gsub(".*\\(", "", gsub("\\).*$","", txt[[1]][txtc]))))
connective = as.numeric(gsub(" ","", gsub("^.*:", "", txt[[1]][txtc])))
ruleList = c()
for ( fg in 1:length(inputVals[[1]])){
ruleList = c(ruleList, as.numeric(inputVals[[1]][fg]))
}
for ( fg in 1:length(outputVals[[1]])){
ruleList = c(ruleList, as.numeric(outputVals[[1]][fg]))
}
ruleList = c (ruleList, weight)
ruleList = c (ruleList, connective)
FIS = addRule(FIS, ruleList)
tippertest()
sink()
tippertest()
tippertest
FIS = newFIS("tippertest")
FIS = addVar(FIS, "input", "service", 0:10)
FIS = addVar(FIS, "input", "food", 0:10)
FIS = addVar(FIS, "input", "testor", 0:10)
FIS = addVar(FIS, "output", "tip", 0:30)
mf1 = gaussMF("poor", 0:10, c(1.5, 0, 1))
mf2 = gaussMF("good", 0:10, c(1.5, 5, 1))
mf3 = gaussMF("excellent", 0:10, c(1.5, 10, 1))
mf4 = trapMF("rancid", 0:10, c(0, 0, 1, 3, 1))
mf5 = trapMF("delicious", 0:10, c(7, 9, 10, 10, 1))
mf6 = triMF("cheap", 0:30, c(0, 5, 10, 1))
mf7 = triMF("average", 0:30, c(10, 15, 20, 1))
mf8 = triMF("generous", 0:30, c(20, 25, 30, 1))
mf9 = guassMF("test", 0:10, c(1,1,1))
FIS = addMF(FIS, "input", 1, mf1)
FIS = addMF(FIS, "input", 1, mf2)
FIS = addMF(FIS, "input", 1, mf3)
FIS = addMF(FIS, "input", 2, mf4)
FIS = addMF(FIS, "input", 2, mf5)
FIS = addMF(FIS, "input", 3, mf9)
FIS = addMF(FIS, "output", 1, mf6)
FIS = addMF(FIS, "output", 1, mf7)
FIS = addMF(FIS, "output", 1, mf8)
FIS = addRule(FIS, c(1, 1, 1, 1, 1, 2))
FIS
evalFIS(matrix(c(1,1,1), 1,3), FIS)
(matrix(c(1,1,1), 1,3)
)
matrix(c(1,1,1), 1,3)
setwd("C:\\Users\\cxk\\Dropbox\\Private\\Dissertation\\ids-github\\src")
library("shiny")
runApp(".")
