im <- with(x_data, interp(x,y,z))
x
x<-x_data[1]
y<-x_data[2]
im <- with(x_data, interp(x,y,z))
x<-unlist(x)
y<-unlist(y)
z2<-unlist(z2)
x
y
z
z2
z2<-unlist(z2, true)
z2<-unlist(z2, recursive=FALSE)
z2
z2<-unlist(z2)
x_data[1]
y_data <- x_data
y_data
y_data <- cbind(z2)
y_data
z2 <- unlist(y_data)
z2
im2 <- with(x_data, interp(x,y,z2))
im2
with(im2, image(x,y,z2))
with(im2, image(x,y,z2))
im2 <- with(x_data, interp(x,y,z2))
z2
x
y
z
z
z2
z2<-unlist(z2)
z2
x_data
x_data[1]
y_data <-x_data
y_data <- cbind(y_data, z2)
y_data
z2 <- unlist(y_data[4])
z2
library(akima)
im <- with(x_data,interp(x,y,z2))
with(im,image(x,y,z2))
z
z2
zlibrary(akima)
im <- with(x_data,interp(x,y,z))
with(im,image(x,y,z))
zlibrary(akima)
im <- with(x_data,interp(x,y,z))
with(im,image(x,y,z))
zlibrary(akima)
im <- with(x_data,interp(x,y,z))
with(im,image(x,y,z2))
zlibrary(akima)
im <- with(x_data,interp(x,y,z2))
with(im,image(x,y,z2))
m
m2
zlibrary(akima)
im <- with(x_data,interp(x,y,z2))
with(im,image(x,y,m2))
zlibrary(akima)
im <- with(x_data,interp(x,y,z2))
with(im,image(x,y,m))
zlibrary(akima)
im <- with(x_data,interp(x,y,z2))
with(im,image(x,y,z2))
zlibrary(akima)
im <- with(x_data,interp(x,y,m2))
with(im,image(x,y,z2))
zlibrary(akima)
im <- with(x_data,interp(x,y,m2))
with(im,image(x,y,m2))
length(x)
length(y)-1
length(m2)
length(z)
z2<-z
im <- with(x_data,interp(x,y,z2))
with(im,image(x,y,z2))
im <- with(x_data,interp(x,y,z))
with(im,image(x,y,z))
z2 <- z
z
z2
m2
z2
surf(BESTFIS)
z2
source('C:/Users/Cxk/Dropbox/Private/University/Third Year/FUZ/coursework/AMAZINGFIS.r')
evalFIS(matrix(c(0,45),1,2))
evalFIS(matrix(c(0,45),1,2), BESTFIS)
evalFIS(matrix(c(20,45),1,2), BESTFIS)
evalFIS(matrix(c(40,45),1,2), BESTFIS)
evalFIS(matrix(c(60,45),1,2), BESTFIS)
evalFIS(matrix(c(80,45),1,2), BESTFIS)
evalFIS(matrix(c(160,25),1,2), BESTFIS)
# Ten attempts, gaussian outputs
# GAUSS OUT
require("FuzzyToolkitUoN")
#rm(list=ls(all=TRUE))
#source("/home/cxk/Dropbox/Private/University/Third\ Year/FUZ/coursework/testFramework.r")
#x_data <- read.csv("/home/cxk/Dropbox/Private/University/Third\ Year/FUZ/coursework/dataset.csv")
# Create the BESTFIS object
BESTFIS <- newFIS("Urgency Calculator v10")
# Add the three variables, 2 inputs and 1 output
BESTFIS <- addVar(BESTFIS, "input",  "Heart Rate",  c(0:160))
BESTFIS <- addVar(BESTFIS, "input",  "Temperature", c(25:45))
BESTFIS <- addVar(BESTFIS, "output", "Urgency",     c(0:100))
mf1 <- gaussMF("D Low", 0:160, c(10.2,-15,1))
mf2 <- gaussMF("V Low", 0:160, c(5.2,40,1))
mf3 <- gaussMF("Low", 0:160, c(7.3,50,1))
mf4 <- gaussMF("Average", 0:160, c(14.8,80,1))
mf5 <- gaussMF("High", 0:160, c(10.2,108,1))
mf6 <- gaussMF("V High", 0:160, c(7.8,122,1))
mf7 <- gaussMF("D High", 0:160, c(20,177,1))
# Add membership functions to the "Heart Rate" variable
BESTFIS <- addMF(BESTFIS, "input", 1, mf1)
BESTFIS <- addMF(BESTFIS, "input", 1, mf2)
BESTFIS <- addMF(BESTFIS, "input", 1, mf3)
BESTFIS <- addMF(BESTFIS, "input", 1, mf4)
BESTFIS <- addMF(BESTFIS, "input", 1, mf5)
BESTFIS <- addMF(BESTFIS, "input", 1, mf6)
BESTFIS <- addMF(BESTFIS, "input", 1, mf7)
plotMF(BESTFIS, "input", 1)
# 5.488184
mf8 <- trapMF("D Low", 25:45, c(25,25,27,29,1))
mf9 <- trapMF("V Low", 25:45, c(27,32,33,35,1))
mf10 <- trapMF("Low", 25:45, c(34,35,36,37,1))
mf11 <- triMF("Average", 25:45, c(36.5,37,37.5,1))
mf12 <- trapMF("High", 25:45, c(37,39,40,41,1))
mf13 <- trapMF("V High", 25:45, c(38,41,42,44,1))
mf14 <- trapMF("D High", 25:45, c(41,45,45,45,1))
BESTFIS <- addMF(BESTFIS, "input", 2, mf8)
BESTFIS <- addMF(BESTFIS, "input", 2, mf9)
BESTFIS <- addMF(BESTFIS, "input", 2, mf10)
BESTFIS <- addMF(BESTFIS, "input", 2, mf11)
BESTFIS <- addMF(BESTFIS, "input", 2, mf12)
BESTFIS <- addMF(BESTFIS, "input", 2, mf13)
BESTFIS <- addMF(BESTFIS, "input", 2, mf14)
plotMF(BESTFIS, "input", 2)
# Create membership functions for "Urgency"
mf11 <- gaussMF("Noncritical", c(0:100), c(5.8,4,1))
mf12 <- gaussMF("Low",         c(0:100), c(4.125,33,1))
mf13 <- gaussMF("Rising",      c(0:100), c(3.675,31,1))
mf14 <- gaussMF("High",        c(0:100), c(4.1,79,1))
mf15 <- gaussMF("Critical",    c(0:100), c(3.9,102,1))
BESTFIS <- addMF(BESTFIS, "output", 1, mf11)
BESTFIS <- addMF(BESTFIS, "output", 1, mf12)
BESTFIS <- addMF(BESTFIS, "output", 1, mf13)
BESTFIS <- addMF(BESTFIS, "output", 1, mf14)
BESTFIS <- addMF(BESTFIS, "output", 1, mf15)
plotMF(BESTFIS, "output", 1)
# Create the rules of the system
# HR is D Low
BESTFIS <- addRule(BESTFIS, c(1, 1, 5, 1, 1))
BESTFIS <- addRule(BESTFIS, c(1, 2, 5, 1, 1))
BESTFIS <- addRule(BESTFIS, c(1, 3, 5, 1, 1))
BESTFIS <- addRule(BESTFIS, c(1, 4, 5, 1, 1))
BESTFIS <- addRule(BESTFIS, c(1, 5, 5, 1, 1))
BESTFIS <- addRule(BESTFIS, c(1, 6, 5, 1, 1))
BESTFIS <- addRule(BESTFIS, c(1, 7, 5, 1, 1))
# HR is V Low
BESTFIS <- addRule(BESTFIS, c(2, 1, 5, 1, 1))
BESTFIS <- addRule(BESTFIS, c(2, 2, 4, 1, 1))
BESTFIS <- addRule(BESTFIS, c(2, 3, 4, 1, 1))
BESTFIS <- addRule(BESTFIS, c(2, 4, 3, 1, 1))
BESTFIS <- addRule(BESTFIS, c(2, 5, 4, 1, 1))
BESTFIS <- addRule(BESTFIS, c(2, 6, 4, 1, 1))
BESTFIS <- addRule(BESTFIS, c(2, 7, 5, 1, 1))
# HR is Low
BESTFIS <- addRule(BESTFIS, c(3, 1, 5, 1, 1))
BESTFIS <- addRule(BESTFIS, c(3, 2, 4, 1, 1))
BESTFIS <- addRule(BESTFIS, c(3, 3, 3, 1, 1))
BESTFIS <- addRule(BESTFIS, c(3, 4, 2, 1, 1))
BESTFIS <- addRule(BESTFIS, c(3, 5, 3, 1, 1))
BESTFIS <- addRule(BESTFIS, c(3, 6, 4, 1, 1))
BESTFIS <- addRule(BESTFIS, c(3, 7, 5, 1, 1))
# HR is Average
BESTFIS <- addRule(BESTFIS, c(4, 1, 5, 1, 1))
BESTFIS <- addRule(BESTFIS, c(4, 2, 4, 1, 1))
BESTFIS <- addRule(BESTFIS, c(4, 3, 3, 1, 1))
BESTFIS <- addRule(BESTFIS, c(4, 4, 1, 1, 1))
BESTFIS <- addRule(BESTFIS, c(4, 5, 3, 1, 1))
BESTFIS <- addRule(BESTFIS, c(4, 6, 4, 1, 1))
BESTFIS <- addRule(BESTFIS, c(4, 7, 5, 1, 1))
# HR is High
BESTFIS <- addRule(BESTFIS, c(5, 1, 5, 1, 1))
BESTFIS <- addRule(BESTFIS, c(5, 2, 4, 1, 1))
BESTFIS <- addRule(BESTFIS, c(5, 3, 3, 1, 1))
BESTFIS <- addRule(BESTFIS, c(5, 4, 2, 1, 1))
BESTFIS <- addRule(BESTFIS, c(5, 5, 3, 1, 1))
BESTFIS <- addRule(BESTFIS, c(5, 6, 4, 1, 1))
BESTFIS <- addRule(BESTFIS, c(5, 7, 5, 1, 1))
# HR is V High
BESTFIS <- addRule(BESTFIS, c(6, 1, 5, 1, 1))
BESTFIS <- addRule(BESTFIS, c(6, 2, 4, 1, 1))
BESTFIS <- addRule(BESTFIS, c(6, 3, 4, 1, 1))
BESTFIS <- addRule(BESTFIS, c(6, 4, 3, 1, 1))
BESTFIS <- addRule(BESTFIS, c(6, 5, 4, 1, 1))
BESTFIS <- addRule(BESTFIS, c(6, 6, 4, 1, 1))
BESTFIS <- addRule(BESTFIS, c(6, 7, 5, 1, 1))
# HR is D High
BESTFIS <- addRule(BESTFIS, c(7, 7, 5, 1, 1))
BESTFIS <- addRule(BESTFIS, c(7, 1, 5, 1, 1))
BESTFIS <- addRule(BESTFIS, c(7, 2, 5, 1, 1))
BESTFIS <- addRule(BESTFIS, c(7, 3, 5, 1, 1))
BESTFIS <- addRule(BESTFIS, c(7, 4, 5, 1, 1))
BESTFIS <- addRule(BESTFIS, c(7, 5, 5, 1, 1))
BESTFIS <- addRule(BESTFIS, c(7, 6, 5, 1, 1))
BESTFIS <- addRule(BESTFIS, c(7, 7, 5, 1, 1))
#evalBESTFIS(matrix(c(hrate, temp),1,2), BESTFIS)
gensurf(BESTFIS)
calcRMSE(x_data,BESTFIS)
writeFIS("~/FUZ-FIS-4159378.fis")
writeFIS(BESTFIS, "~/FUZ-FIS-4159378.fis")
test <- readFIS("~/FUZ-FIS-4159378.fis")
gensurf(test)
calcRMSE(test)
calcRMSE(x-data,test)
calcRMSE(x_data,test)
calcRMSEDefz(x_data, test)
test$defuzzMethod <- "Bisector"
gensurf(test)
test$defuzzMethod <- "bisector"
gensurf(test)
test$defuzzMethod <- "mom"
gensurf(test)
test$defuzzMethod <- "lom"
gensurf(test)
test$defuzzMethod <- "som"
gensurf(test)
setwd("C:\\Users\\cxk\\Dropbox\\Private\\Dissertation\\ids-github\\src")
library("shiny")
runApp(".")
rulecount
ruleCount
ruleCount == 0
sink()
sink()
ruleCount == 0
Q
setwd("C:\\Users\\cxk\\Dropbox\\Private\\Dissertation\\ids-github\\src")
library("shiny")
runApp(".")
setwd("C:\\Users\\cxk\\Dropbox\\Private\\Dissertation\\ids-github\\src")
library("shiny")
runApp(".")
setwd("C:\\Users\\cxk\\Dropbox\\Private\\Dissertation\\ids-github\\src")
library("shiny")
runApp(".")
fis$name
text[[1]]
txt[[1]]
txt[[1]][2]
sink()
sink()
txt[[1]][2]
gsub("Name='|'", "", txt[[1]][2])
gsub("Type='|'","",txt[[1]][3])
gsub("AndMethod='|'","",txt[[1]][8])
FIS <- newFIS("temp")
FIS$name= gsub("Name='|'","",txt[[1]][2])
FIS$type= gsub("Type='|'","",txt[[1]][3])
FIS$version= eval(parse(text=txt[4]))
FIS$andMethod= gsub("AndMethod='|'","",txt[[1]][8])
FIS$orMethod= gsub("orMethod='|'","",txt[[1]][9])
FIS$impMethod= gsub("impMethod='|'","",txt[[1]][10])
FIS$aggMethod= gsub("aggMethod='|'","",txt[[1]][11])
FIS$defuzzMethod= gsub("defuzzMethod='|'","",txt[[1]][12])
FIS
FIS$name= gsub("Name='|'","",txt[[1]][2])
FIS$type= gsub("Type='|'","",txt[[1]][3])
FIS$version= eval(parse(text=txt[4]))
FIS$andMethod= gsub("AndMethod='|'","",txt[[1]][8])
FIS$orMethod= gsub("OrMethod='|'","",txt[[1]][9])
FIS$impMethod= gsub("ImpMethod='|'","",txt[[1]][10])
FIS$aggMethod= gsub("AggMethod='|'","",txt[[1]][11])
FIS$defuzzMethod= gsub("DefuzzMethod='|'","",txt[[1]][12])
FIS
setwd("C:\\Users\\cxk\\Dropbox\\Private\\Dissertation\\ids-github\\src")
library("shiny")
runApp(".")
FIS
sink()
sink()
FIS()
FIS
Q
setwd("C:\\Users\\cxk\\Dropbox\\Private\\Dissertation\\ids-github\\src")
library("shiny")
runApp(".")
FIS
sink()
sink()
FIS
FIS
sink()
sink()
FIS
Q
setwd("C:\\Users\\cxk\\Dropbox\\Private\\Dissertation\\ids-github\\src")
library("shiny")
runApp(".")
txtc
sink()
sink()
txtc
grep("\\[Input.\\]")
grep("\\[Input.\\]", txt)
txt
grep("\\[Input\d\\]", txt)
grep("\\[Input\\d\\]", txt)
grep("\\[Input\\d\\]", txt[[1]])
length(grep("\\[Input\\d\\]", txt[[1]]))
setwd("C:\\Users\\cxk\\Dropbox\\Private\\Dissertation\\ids-github\\src")
library("shiny")
runApp(".")
inputLines
sink()
inputLines
txtc
inputLines[[1]]
inputLines[[2]]
inputLines[[0]]
inputLines[[1]][1]
inputLines[[1]][0]
inputLines[[1]][1]
inputLines[[1]][2]
inputLines[[1]][3]
inputLines[[1]]
inputLines
setwd("C:\\Users\\cxk\\Dropbox\\Private\\Dissertation\\ids-github\\src")
library("shiny")
runApp(".")
txtc
sink()
txtc
eval(parse(text=txt[txtc+3]))
txt[txtc+3]
txt[[txtc+3]]
txt
txtc
txt[[txtc]]
txt[[txtc]]
txt[[14]]
txt[[1]]
txt[[1]][14]
txt[[1]][txtc+3]
eval(parse(text=txt[[1]][txtc+3]))
f <- eval(parse(text=txt[[1]][txtc+3]))
FIS
sink()
FIS
varHolder
setwd("C:\\Users\\cxk\\Dropbox\\Private\\Dissertation\\ids-github\\src")
library("shiny")
runApp(".")
txt[[1]][txtc]
sink()
txt[[1]][txtc]
gsub("Name='|'", "", txt[[1]][txtc])
gsub("Name='|'", "", txt[[1]][txtc])
setwd("C:\\Users\\cxk\\Dropbox\\Private\\Dissertation\\ids-github\\src")
library("shiny")
runApp(".")
varHolder
sink()
varHolder
varHolder
txt[[1]][txtc]
txt[[1]][txtc]
gsub(txt[[1]][txtc])
gsub("","",txt[[1]][txtc])
gsub("Range=","",txt[[1]][txtc])
gsub("Range=\\[","",txt[[1]][txtc])
gsub("Range=\\[| ","",txt[[1]][txtc])
gsub("Range=\\[|\d\\]","",txt[[1]][txtc])
gsub("Range=\\[|\\d\\]","",txt[[1]][txtc])
gsub("Range=\\[|\\d+\\]","",txt[[1]][txtc])
gsub("Range=\\[|\\d+\\]","",txt[[1]][txtc])
gsub("Range=\\[\d+","",txt[[1]][txtc])
gsub("Range=\\[\\d+","",txt[[1]][txtc])
gsub("Range=\\[\\d+ |\\]","",txt[[1]][txtc])
setwd("C:\\Users\\cxk\\Dropbox\\Private\\Dissertation\\ids-github\\src")
library("shiny")
runApp(".")
FIS
sink()
FIS
FIS
sink()
FIS
setwd("C:\\Users\\cxk\\Dropbox\\Private\\Dissertation\\ids-github\\src")
library("shiny")
runApp(".")
FIS
sink()
F()S
FIS
FIS
mfVal
sink()
mfVal
txt[[1]][txtc]
txt[[1]][txtc+1]
txt[[1]][txtc+1]
mfVal
sink()
mfVal
gsub("","",txt[[1]][txtc])
gsub("MF\\d+","",txt[[1]][txtc])
gsub("MF\\d+='","",txt[[1]][txtc])
gsub("MF\\d+='|':'(gaussmf|gaussbmf|trapmf|trimf)","",txt[[1]][txtc])
gsub("MF\\d+='|':'","",txt[[1]][txtc])
gsub("MF\\d+='|':'\s","",txt[[1]][txtc])
gsub("MF\\d+='|':'\\s","",txt[[1]][txtc])
gsub("MF\\d+='|':'\\S","",txt[[1]][txtc])
gsub("MF\\d+='|':'\\S*","",txt[[1]][txtc])
gsub("MF\\d+='|':'[A-Za-z]","",txt[[1]][txtc])
gsub("MF\\d+='|':'[A-Za-z]+","",txt[[1]][txtc])
gsub("MF\\d+='|':'[A-Za-z]+',\\[","",txt[[1]][txtc])
gsub("MF\\d+='|':'[A-Za-z]+',\\[\\d+","",txt[[1]][txtc])
gsub("MF\\d+='|':'[A-Za-z]+',\\[(\\d+ )+","",txt[[1]][txtc])
gsub("MF\\d+='|':'[A-Za-z]+',\\[(\\d+\s)+","",txt[[1]][txtc])
gsub("MF\\d+='|':'[A-Za-z]+',\\[(\\d+\\s)+","",txt[[1]][txtc])
gsub("MF\\d+='|':'[A-Za-z]+',\\[(( |-)\\d+(\\.|)\\d+\\s)+","",txt[[1]][txtc])
gsub("MF\\d+='|':'[A-Za-z]+',\\[","",txt[[1]][txtc])
gsub("MF\\d+='|':'[A-Za-z]+',\\[\\d","",txt[[1]][txtc])
gsub("MF\\d+='|':'[A-Za-z]+',\\[\\d.","",txt[[1]][txtc])
gsub("MF\\d+='|':'[A-Za-z]+',\\[\\d\\.","",txt[[1]][txtc])
gsub("MF\\d+='|':'[A-Za-z]+',\\[\\d(\\.)","",txt[[1]][txtc])
gsub("MF\\d+='|':'[A-Za-z]+',\\[\\d(\\.)?","",txt[[1]][txtc])
gsub("MF\\d+='|':'[A-Za-z]+',\\[(-)?\\d(\\.)?","",txt[[1]][txtc])
gsub("MF\\d+='|':'[A-Za-z]+',\\[(-)?\\d(\\.)?\\d*","",txt[[1]][txtc])
gsub("MF\\d+='|':'[A-Za-z]+',\\[(-)?\\d+(\\.)?\\d*","",txt[[1]][txtc])
gsub("MF\\d+='|':'[A-Za-z]+',\\[((-)?\\d+(\\.)?\\d*\\s)+","",txt[[1]][txtc])
gsub("MF\\d+='|':'[A-Za-z]+',\\[((-)?\\d+(\\.)?\\d*(\\s)?)+","",txt[[1]][txtc])
gsub("MF\\d+='|':'[A-Za-z]+',\\[((-)?\\d+(\\.)?\\d*(\\s)?)+\\]","",txt[[1]][txtc])
gsub("MF\\d+='|':'[A-Za-z]+',\\[((-)?\\d+(\\.)?\\d*(\\s)?)+\\]","",txt[[1]][txtc])
gsub("MF\\d+='|':'[A-Za-z]+',\\[((-)?\\d+(\\.)?\\d*(\\s)?)+\\]","",txt[[1]][txtc])
gsub("","",txt[[1]][txtc])
gsub("MF\\d+='","",txt[[1]][txtc])
gsub("MF\\d+='[a-zA-Z]","",txt[[1]][txtc])
gsub("MF\\d+='[a-zA-Z]+","",txt[[1]][txtc])
gsub("MF\\d+='[a-zA-Z]+':'","",txt[[1]][txtc])
gsub("MF\\d+='[a-zA-Z]+':'|',\\[((-)?\\d+(\\.)?\\d*(\\s)?)+\\]","",txt[[1]][txtc])
gsub("MF\\d+='[a-zA-Z]+':'|',\\[((-)?\\d+(\\.)?\\d*(\\s)?)+\\]","",txt[[1]][txtc])
?gaussMF
?gaussBMF
?gaussbMF
gsub("","",txt[[1]][txtc])
gsub("MF\\d+='[a-zA-Z]+':'|',\\[","",txt[[1]][txtc])
gsub("MF\\d+='[a-zA-Z]+':'|',\\[|\\]","",txt[[1]][txtc])
gsub("MF\\d+='[a-zA-Z]+':'[a-zA-Z]|',\\[|\\]","",txt[[1]][txtc])
gsub("MF\\d+='[a-zA-Z]+':'[a-zA-Z]+|',\\[|\\]","",txt[[1]][txtc])
gsub("MF\\d+='[a-zA-Z]+':'[a-zA-Z]+|',\\[|\\]","",txt[[1]][txtc])
mfParams = gsub("MF\\d+='[a-zA-Z]+':'[a-zA-Z]+|',\\[|\\]","",txt[[1]][txtc])
mfParams
strsplit(mfParams, " ")
mf = gaussMF(mfName, c(minHolder:maxHolder), strsplit(mfParams, " "))
mf = gaussMF("mfName"test"", c(0:10), strsplit(mfParams, " "))
mf = gaussMF(test", c(0:10), strsplit(mfParams, " "))
params = strsplit(mfParams, " ")
paramsV = c()
for ( fg in 1:length(params) ){
paramsV = c(paramsV, params[[1]][fg])
}
paramsV
paramsV
length(params)
length(params[[1]])
params = strsplit(mfParams, " ")
paramsV = c()
for ( fg in 1:length(params[[1]]) ){
paramsV = c(paramsV, params[[1]][fg])
}
paramsV
mf = gaussMF(test", c(0:10), paramsV)
)
""
mf = gaussMF("test", c(0:10), paramsV)
params = strsplit(mfParams, " ")
paramsV = c()
for ( fg in 1:length(params[[1]]) ){
paramsV = c(paramsV, as.numeric(params[[1]][fg]))
}
mf = gaussMF("test", c(0:10), paramsV)
mf
plot(mf$mfx, mf$mfVals)
plot(mf$mfXx, mf$mfVals)
plot(mf$mfX, mf$mfVals)
Q
setwd("C:\\Users\\cxk\\Dropbox\\Private\\Dissertation\\ids-github\\src")
library("shiny")
runApp(".")
mf
paramsV
sink()
paramsV
mf = gaussMF(mfName, c(minHolder:maxHolder), params)
mf = gaussMF(mfName, c(minHolder:10), params)
mf = gaussMF(mfName, c(0:10), params)
mf = gaussMF("test", c(0:10), params)
mf = gaussMF("test", c(0:10), paramsV)
FIS
sink()
FIS
